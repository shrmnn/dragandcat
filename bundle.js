/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
eval("const grid = document.querySelector('.grid');\r\nconst hoop = document.querySelector('.hoop');\r\nconst spawner = document.querySelector('.spawner');\r\n\r\nlet cat;\r\nlet currentField;\r\n\r\nfunction dragStart() {\r\n  this.classList.add('hold');\r\n  cat = this;\r\n}\r\n\r\nfunction dragEnd(event) {\r\n  this.classList.remove('hold');\r\n  cat = null;\r\n\r\n  forgetCatPosition(event);\r\n\r\n  if (currentField === hoop) {\r\n    rememberCatPosition(event);\r\n  }\r\n  if (currentField !== grid && currentField !== spawner && currentField !== hoop) {\r\n    event.target.parentNode.removeChild(event.target);\r\n  }\r\n\r\n  currentField = null;\r\n}\r\n\r\nfunction dragOver(e) {\r\n  e.preventDefault();\r\n\r\n  const active = document.querySelector('.hold');\r\n\r\n  const isMoveable = active && !currentField;\r\n\r\n  if (!isMoveable) return;\r\n}\r\n\r\nfunction dragEnter(e) {\r\n  this.classList.add('hovered');\r\n\r\n  currentField = e.target;\r\n}\r\n\r\nfunction dragLeave(e) {\r\n  this.classList.remove('hovered');\r\n}\r\n\r\nfunction dragDrop(e) {\r\n  this.classList.remove('hovered');\r\n  e.target.append(cat);\r\n\r\n  if (!spawner.childElementCount) {\r\n    createNewKitten(cat);\r\n  }\r\n}\r\n\r\nfunction forgetCatPosition(cat) {\r\n  cat.target.classList.remove('absolute');\r\n\r\n  cat.target.style.left = '0';\r\n  cat.target.style.top = '0';\r\n}\r\n\r\nfunction rememberCatPosition(cat) {\r\n  cat.target.classList.add('absolute');\r\n\r\n  if (cat.offsetX < 0 || cat.offsetY < 0) {\r\n    cat.target.parentNode.removeChild(cat.target);\r\n  }\r\n\r\n  cat.target.style.left = `${cat.offsetX - 50}px`;\r\n  cat.target.style.top = `${cat.offsetY - 50}px`;\r\n}\r\n\r\nfunction createNewKitten() {\r\n  const newKitten = document.createElement('div');\r\n  newKitten.className = 'cat';\r\n  newKitten.draggable = true;\r\n  newKitten.style.outlineColor = `#${Math.floor(Math.random() * 16777215).toString(16)}`;\r\n\r\n  allowElementToBeDraggable(newKitten);\r\n\r\n  spawner.append(newKitten);\r\n}\r\n\r\nfunction allowElementToBeDraggable(element) {\r\n  element.addEventListener('dragstart', dragStart);\r\n  element.addEventListener('dragend', dragEnd);\r\n}\r\n\r\nfunction allowElementsToBeDraggable(elements) {\r\n  elements.forEach(el => {\r\n    el.addEventListener('dragstart', dragStart);\r\n    el.addEventListener('dragend', dragEnd);\r\n  });\r\n}\r\n\r\nfunction allowFieldsToBeDropAvailable(field) {\r\n  field.addEventListener('dragover', dragOver);\r\n  field.addEventListener('dragenter', dragEnter);\r\n  field.addEventListener('dragleave', dragLeave);\r\n  field.addEventListener('drop', dragDrop);\r\n}\r\n\r\nfunction main() {\r\n  createNewKitten();\r\n  allowFieldsToBeDropAvailable(grid);\r\n  allowFieldsToBeDropAvailable(hoop);\r\n}\r\n\r\nmain();\r\nwindow.currentField = currentField;\r\n\n\n//# sourceURL=webpack://JS_DD/./src/index.js?");
/******/ })()
;